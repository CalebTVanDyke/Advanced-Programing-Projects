Types in C
-----------

void

char	}
int 	} "integer types"

float	}
double	} 


fun with integer types:

(1) You can preface any integer with "signed" or "unsigned"
	char x;
	signed char y;
	unsigned char z;

	signed int i;

(2) The type "int" may be prefaced with "short" or "long" or neither 
	Sign goes before it

	Can omit int if you specify short/long or signed/unsigned

Any integer type may be converted to any other integer without doing anything


void 
-----
	void  - for now, only for functions

char
----
	8 bits (1 byte)
	legal values are something like -128, 127

Common Ways to Store negatives:

(1) add a constant

	if char has range -128, ...... 127
	then we would add 128 to whatever we wat to store and then store the binary for that

	01111111

(2) use one bit just for the sign
	typically(but no guarantees)

	-1 becomes (binary for 1)

	10000001

(3) one's complement 

	if we are negative, store the positive with all the bits flipped
	if we are positive, as usual

	-1: 11111110

(4) two's compliment

	INTEL!!!!!!!

	if negative, take one's complement, and add 1
	if positive, as usual

	-1: 11111111

short
-----

	16 bits
	signed: -32768.....32767

	unsigned: 0........65536

int
---
	32 bits

	signed: -2^31,.....2^31-1

	unsigned: 0,.......2^32-1

long
----

	it depends -
		32 bit processor: longs are 32 bits
		64 bit processor: longs are 64 bits


"endian-ness"
-------------

little endian stores least signifigant byte first - order you would do operations in
big endian stores most significant byte first - order you read it


What about floats/doubles? How are they stored?

Floating point precision