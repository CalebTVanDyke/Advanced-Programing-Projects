How to use libraries?


E.g.. I want to use libcool

How?

READ the documentation, but typically:

(1) #include <libcool.h>

	May need to tell the compiler where this is

	E.g.. #include <home/students/alice/libs/libcool.h>

(2) compile as usual

(3) need to add the library when linking 

	i.e.. there is a compiled library (object files or similar)
	e.g.. libcool.a or libcool.so or libcool.dll or .... depends on your system

	By Hand:

		gcc all.o my.o object.o files.o go.o here.o /pather/to/libcool.a

			Not super portable

	OR:
		gcc all.o my.o object.o files.o -lcool

		^ string off the lib add "-l", not no spaces or extension

What about <stdio.h>?

Why not:

	gcc hello.c -lstdio ???

Answer:

	there is a "standard C library" that contains things like:
		functions in <stdio.h>
		functions in <string.h>
		functions in <stdlib.h>

		other things

	When you run the C compiler, by default the standard C library is automatically linked in as well


Summary

	Want to build executable "murca" from lots of .o files

		foo.o
		bar.o
		cruft.o

	What are the steps?

		(1) gcc -c foo.c
		(2) gcc -c bar.c
		(3) gcc -c cruft.c
		(4) gcc -o murca foo.o bar.o cruft.o

	Suppose you modify foo.h, bar.c   How do I rebuild the executable?

		- rebuild everything that depends on foo.h and bar.c

		- and it gets more complicated because you can "next #includes"

Let's make it easier!


What is make?
	
	Make is a system to automatically rebuild files when other files change

		- applies to much more than just building C programs / libraries

How does make work?

	You tell it the rules for rebuilding things
		- specify the dependencies of a file
		- specify the rule to rebuild that file

	All this goes into a text file, called a "makefile", typically named "makefile" or "Makefile"

What does a makefile look like?

	target : list the dependencies for target
	target : maybe two line because there are lots
	<TAB> rule to (re)build the  target

Fun things:
	(1) rule is optional
	(2) there may be NO dependencies!

What happens on the command line:

	$ make target

	$ make

	will build whatever is the first target

	$ make target1 target2 target3

	Doesn't rebuild a file if it doesn't need to

		Based on file times

	make is recursive

	i.e..

	if target depends on foo and bar
	than "make target" checks first, do I need to build foo and bar?

	if there is no depenency the target will be built no matter what

	clean:
		rm *.o myexec

	this cleans by removing object files and executables

	for more: look at manual for "GNU Make" online

	www.gnu.org/software/make/manual


