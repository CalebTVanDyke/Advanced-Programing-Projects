Scope of Paramaters
-------------------

Static Variables in C:

 	* completely different from "static" in Java
 	
 	* are declared locally (inside a function) ....

 	* have the same scope as a local variable

 	* but act like global variables

Jim's fun runtime stack example (see bb)
	- local variables are stored in the same spot on the runtime stack

Where are parameters stored in memory?

- on the runtime stack

What is this beast?

	* A chunk of memory that acts like a stack (from 228)

How is it used?

	* (details are sys/os/compiler/optimization specific)

When you call a function:

	(1) push "address of machine language instruction to execute when we get back"

	(2) push parameters 

	(3) jump to function code

	(4)function local variables are "pushed" onto the runtime stack
		(except static ones)

	(5) Execute the function, until "return"

	(6) pop local variables & parameters

	(7) pop the "next instruction to execute"

	(8) push the return value of the function?

	(9) jump to "next instruction to execute"


Do changes to parameters go back to the caller?

	void foobar(int x){
		x++
	}

	int main(){
		int y = 7;
		foobar(7);
		printf(....)
	}

	NOPE!!!

	In C - parameters are "passed by value" (means - copy)

	with one exception --- pointer

What if I want the changes to go back?

	* Need to use pointers 
	* this is why we need "&" in scanf