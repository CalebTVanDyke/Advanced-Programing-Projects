How to read and write files in C:

Functions line in <stdio.h>

(1) Declare a variable of type FILE*

(2) open the file

	- fopen("path to file", "mode")
		- returns FILE*
			FILE* file = fopen("myfile.aiff", "r")
		- returns a NULL pointer if file was not found
	Notes:

		* the path is either an absolute or relative pathname

		* the mode tells if you want to read or write (or both!!!)

			"r" for reading
			"w" for writing

			"b" is stupid

(3) Read or write data

	fprintf(file, "ASDF %d", myint);
	fgets(....)
	fgetc(....)
	fscanf(....)

(4) When you're done:

	fclose(inf);
			^^ a FILE*

	In unix all files are automatically close when the process terminates


Cool functiona to read from a file:
You can intermix all of these, and each one will advance the "file pointer"

	FILE = stream of chars/bytes

	fscanf(FILE*, format string, args, args, ....);
	fgets(char[], size, FILE*)
	fgetc(FILE*) /* returns a char or EOF means end of file */
	fread(chunk of memory, item size, #items, FILE*);

To Check for end of file:

	feof(FILE*);

PRO TRICK:

	ungetc(char, FILE*); - put a character back onto the file stream

	DOES NOT MODIFY THE ACTUAL FILE

	How many times can I call ungetc?

		Standard guarantees that it will work once.

		In practice - it works until you run out of memory.

	Don't have to put the same character back
2
Functions to write to a file:
Can intermix these and all will advance the file pointer

	fprintf(FILE*, format_string, args, args);
	fputc(char, FILE*);
	fputs(string, FILE*);
	fwrite(chunk of memory, size of item, number of items, FILE*);


PART 2:

	read from a file or read from stdin
	write to a file or write to stdout

With the 3 standard files, this is actualy VERY EASY!

Example:
	
	int generateOutput(FILE* out, ...);

Your code looks like this when you do it right:
	
	if(write_to_stdout) {
		generateOutput(stdout, ...);
	} else {
		FILE* outf = fopen("outputfile", "w");
		if(!outf) {
			generateOutput(outf, ...)
			fclose(outf)
		}else{
			fprintf(stderr, "bad %d", &anint);
		}
	}
	
You can redirect stderr using:

	$ command args args 2> file.txt

Really crazy shell trick:

	2>&l 

	That means: send standard error to wherever standard output is CURRENTLY going

	$ myprog 2>&l  > /dev/null | other program with args

	/dev/null trashes everything 
